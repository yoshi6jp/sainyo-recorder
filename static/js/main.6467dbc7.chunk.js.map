{"version":3,"sources":["actions/index.ts","store.ts","reducer.ts","AppDb.ts","util/converter.ts","sideEffector.ts","util/useSideEffector.ts","components/Provider.tsx","components/ItemList.tsx","components/InputButton.tsx","App.tsx","serviceWorker.ts","index.tsx","components/InputButton.module.css"],"names":["ActionTypes","initialState","itemList","totalList","valueList","reducer","state","arguments","length","undefined","action","type","PUT_ITEM","item","payload","concat","Object","toConsumableArray","objectSpread","SET_ITEMS","items","SET_TOTALS","totals","db","_Dexie","AppDatabase","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","version","stores","values","table","inherits","Dexie","toTimeRangeIndex","datetime","Math","floor","moment","local","hour","loadItems","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","orderBy","limit","toArray","sent","stop","_x","apply","loadTotals","_ref2","_callee2","_context2","_x2","calcTotal","_ref3","_callee3","query","totalDoc","dateKey","totalValue","_context3","get","date","timeRangeIndex","startOf","add","format","where","_","sumBy","put","value","LOAD_TOTALS","_x3","_x4","sideEffector","CALC_TOTAL","LOAD_ITEMS","dispatchSideEffector","dispatchSECaller","RootContext","createContext","Provider","children","_useSideEffector","slicedToArray","dispatchSE","useCallback","useSideEffector","useReducer","_useSideEffector2","useEffect","react_default","createElement","ItemList","_useContext$state","useContext","total","last","className","map","key","getTime","InputButton","_useState","useState","_useState2","visible","setVisible","_useState3","Date","_useState4","setDatetime","_useState5","_useState6","setValue","_useContext","onOpen","onClose","onDatetimeChange","onValueChange","val","onSubmit","num","Number","Fragment","icon","onClick","classnames","styles","top","es","popup","animationType","renderHeader","locale","enUs","onChange","Item","defaultValue","App","Provider_Provider","ItemList_ItemList","InputButton_InputButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6467dbc7.chunk.js","sourcesContent":["import { IItem, ITotal, TotalQuery } from \"../AppDb\";\nexport enum ActionTypes {\n  PUT_ITEM = \"PUT_ITEM\",\n  LOAD_ITEMS = \"LOAD_ITEMS\",\n  SET_ITEMS = \"SET_ITEMS\",\n  PUT_TOTAL = \"PUT_TOTAL\",\n  LOAD_TOTALS = \"LOAD_TOTALS\",\n  SET_TOTALS = \"SET_TOTALS\",\n  CALC_TOTAL = \"CALC_TOTAL\"\n}\n\nexport interface IAction {\n  type: ActionTypes;\n  payload?: any;\n  meta?: { [key: string]: any };\n}\nexport interface PUT_ITEM extends IAction {\n  type: ActionTypes.PUT_ITEM;\n  payload: { item: IItem };\n}\nexport interface LOAD_ITEMS extends IAction {\n  type: ActionTypes.LOAD_ITEMS;\n}\nexport interface SET_ITEMS extends IAction {\n  type: ActionTypes.SET_ITEMS;\n  payload: { items: IItem[] };\n}\nexport interface PUT_TOTAL extends IAction {\n  type: ActionTypes.PUT_TOTAL;\n  payload: { total: ITotal };\n}\nexport interface LOAD_TOTALS extends IAction {\n  type: ActionTypes.LOAD_TOTALS;\n}\nexport interface SET_TOTALS extends IAction {\n  type: ActionTypes.SET_TOTALS;\n  payload: { totals: ITotal[] };\n}\nexport interface CALC_TOTAL extends IAction {\n  type: ActionTypes.CALC_TOTAL;\n  payload: { query: TotalQuery };\n}\n\nexport type Actions =\n  | PUT_ITEM\n  | LOAD_ITEMS\n  | SET_ITEMS\n  | PUT_TOTAL\n  | LOAD_TOTALS\n  | SET_TOTALS\n  | CALC_TOTAL;\n","import { IItem, ITotal, IValue } from \"./AppDb\";\nexport interface AppState {\n  itemList: IItem[];\n  totalList: ITotal[];\n  valueList: IValue[];\n}\n\nexport const initialState: AppState = {\n  itemList: [],\n  totalList: [],\n  valueList: []\n};\n","import { initialState } from \"./store\";\nimport { ActionTypes, Actions } from \"./actions\";\nexport const reducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.PUT_ITEM: {\n      const { item } = action.payload;\n      const itemList = [...state.itemList, item];\n      return { ...state, itemList };\n    }\n    case ActionTypes.SET_ITEMS: {\n      const { items } = action.payload;\n      const itemList = [...items];\n      return { ...state, itemList };\n    }\n    case ActionTypes.SET_TOTALS: {\n      const { totals } = action.payload;\n      const totalList = [...totals];\n      return { ...state, totalList };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import Dexie from \"dexie\";\nexport interface IItem {\n  id?: number;\n  datetime: Date;\n  date: string;\n  timeRangeIndex: number;\n  value: number;\n}\nexport interface TotalQuery {\n  date: string; // YYYY-MM-DD\n  timeRangeIndex: number;\n}\nexport interface ITotal extends TotalQuery {\n  id?: number;\n  value: number;\n  dateKey: string;\n}\nexport interface IValue {\n  id?: number;\n  value: number;\n}\n\nexport class AppDatabase extends Dexie {\n  items: Dexie.Table<IItem, number>;\n  totals: Dexie.Table<ITotal, number>;\n  constructor() {\n    super(\"SainyoRecorderDatabase\");\n    this.version(1).stores({\n      items: \"++id, date, datetime, timeRangeIndex,value\",\n      totals: \"++id, date, timeRangeIndex, value, dateKey\",\n      values: \"++id, value\"\n    });\n    this.items = this.table(\"items\");\n    this.totals = this.table(\"totals\");\n  }\n}\nexport const db = new AppDatabase();\n","import moment from \"moment\";\nconst TIME_SPAN = 6;\nexport const toTimeRangeIndex = (datetime: Date) =>\n  Math.floor(\n    moment(datetime)\n      .local()\n      .hour() / TIME_SPAN\n  );\n\nexport const toDateKey = (date: string, timeRangeIndex: number) =>\n  moment(date)\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * (timeRangeIndex - 1), \"hours\")\n    .format(\"YYYY-MM-DD\");\n\nexport const toStartAt = (date: string, timeRangeIndex: number) =>\n  moment(date)\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * timeRangeIndex, \"hours\")\n    .format(\"YYYY-MM-DD\");\n\nexport const timeRange = (timeRangeIndex: number) =>\n  `${moment()\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * timeRangeIndex, \"hours\")\n    .format(\"HH:mm\")}-${moment()\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * (timeRangeIndex + 1), \"hours\")\n    .format(\"HH:mm\")}`;\n","import { Dispatch } from \"react\";\nimport { SideEffector } from \"./util/useSideEffector\";\nimport { AppState } from \"./store\";\nimport { Actions, ActionTypes } from \"./actions\";\nimport { db, TotalQuery } from \"./AppDb\";\nimport { toDateKey } from \"./util/converter\";\nimport _ from \"lodash\";\nconst loadItems = async (dispatch: Dispatch<Actions>) => {\n  const items = await db.items\n    .orderBy(\"datetime\")\n    .limit(30)\n    .toArray();\n  dispatch({ type: ActionTypes.SET_ITEMS, payload: { items } });\n};\nconst loadTotals = async (dispatch: Dispatch<Actions>) => {\n  const totals = await db.totals.toArray();\n  dispatch({ type: ActionTypes.SET_TOTALS, payload: { totals } });\n};\nconst calcTotal = async (dispatch: Dispatch<Actions>, query: TotalQuery) => {\n  const totalDoc = await db.totals.get({ ...query });\n  const dateKey = toDateKey(query.date, query.timeRangeIndex);\n  const values = await db.items.where({ ...query }).toArray();\n  const totalValue = _.sumBy(values, \"value\");\n  await db.totals.put({ ...totalDoc, ...query, value: totalValue, dateKey });\n  dispatch({ type: ActionTypes.LOAD_TOTALS });\n};\n\nexport const sideEffector: SideEffector<AppState, Actions> = (\n  action,\n  dispatch,\n  state\n) => {\n  switch (action.type) {\n    case ActionTypes.PUT_ITEM: {\n      const { item } = action.payload;\n      const { date, timeRangeIndex } = item;\n      db.items.put(item);\n      const query: TotalQuery = { date, timeRangeIndex };\n      dispatch({ type: ActionTypes.CALC_TOTAL, payload: { query } });\n      return;\n    }\n    case ActionTypes.LOAD_ITEMS: {\n      loadItems(dispatch);\n      return;\n    }\n    case ActionTypes.CALC_TOTAL: {\n      calcTotal(dispatch, action.payload.query);\n      return;\n    }\n    case ActionTypes.LOAD_TOTALS: {\n      loadTotals(dispatch);\n      return;\n    }\n  }\n};\n","import { Dispatch, useCallback } from \"react\";\nexport type SideEffector<S, A> = (\n  action: A,\n  dispatch: Dispatch<A>,\n  state: S\n) => void;\nexport const useSideEffector = <S, A>(\n  [state, dispatch]: [S, Dispatch<A>],\n  sideEffector: SideEffector<S, A>\n): [S, Dispatch<A>] => {\n  const dispatchSECaller = (action: A) => {\n    dispatchSE(action);\n  };\n  const dispatchSE = useCallback(\n    dispatchSideEffector(state, dispatch, sideEffector, dispatchSECaller),\n    [state, dispatch]\n  );\n  return [state, dispatchSE];\n};\nconst dispatchSideEffector = <S, A>(\n  state: S,\n  dispatch: Dispatch<A>,\n  sideEffector: SideEffector<S, A>,\n  dispatchSECaller: Dispatch<A>\n) => (action: A) => {\n  dispatch(action);\n  sideEffector(action, dispatchSECaller, state);\n};\n","import React, {\n  createContext,\n  useEffect,\n  useCallback,\n  useReducer,\n  Dispatch\n} from \"react\";\nimport { initialState, AppState } from \"../store\";\nimport { reducer } from \"../reducer\";\nimport { Actions, ActionTypes } from \"../actions\";\nimport { sideEffector } from \"../sideEffector\";\nimport { useSideEffector } from \"../util/useSideEffector\";\ninterface IRootContext {\n  state: AppState;\n  dispatch?: Dispatch<Actions>;\n}\nexport const RootContext = createContext<IRootContext>({\n  state: initialState\n});\n\nexport const Provider = ({ children }: { children: React.ReactNode }) => {\n  const [state, dispatch] = useSideEffector(\n    useReducer(reducer, initialState),\n    sideEffector\n  );\n  useEffect(() => {\n    dispatch({ type: ActionTypes.LOAD_ITEMS });\n    dispatch({ type: ActionTypes.LOAD_TOTALS });\n  }, []);\n  const value: IRootContext = {\n    state,\n    dispatch\n  };\n  return <RootContext.Provider value={value}>{children}</RootContext.Provider>;\n};\n","import React, { useContext } from \"react\";\nimport { RootContext } from \"./Provider\";\nimport { ITotal, IItem } from \"../AppDb\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport { timeRange } from \"../util/converter\";\nconst ItemsTotal = ({ items, total }: { items: IItem[]; total: ITotal }) => {\n  return (\n    <>\n      {items.map((item, idx) => {\n        <tr key={idx}>\n          <td>\n            {moment(item.datetime)\n              .local()\n              .format(\"MM/DD\")}\n          </td>\n          <td>\n            {moment(item.datetime)\n              .local()\n              .format(\"HH:mm\")}\n          </td>\n          <td>{item.value}</td>\n        </tr>;\n      })}\n    </>\n  );\n};\nexport const ItemList = () => {\n  const {\n    state: { itemList, totalList }\n  } = useContext(RootContext);\n  const total = _.last(totalList);\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>日付</th>\n          <th>時間</th>\n          <th className=\"text-right\">採尿量</th>\n        </tr>\n      </thead>\n      <tbody>\n        {itemList.map(item => (\n          <tr key={item.datetime.getTime()}>\n            <td>\n              {moment(item.datetime)\n                .local()\n                .format(\"MM/DD\")}\n            </td>\n            <td>\n              {moment(item.datetime)\n                .local()\n                .format(\"HH:mm\")}\n            </td>\n            <td className=\"text-right\">{item.value}</td>\n          </tr>\n        ))}\n        {total && (\n          <tr className=\"table-info\">\n            <td>{moment(total.date).format(\"MM/DD\")}</td>\n            <td>{timeRange(total.timeRangeIndex)}</td>\n            <td className=\"text-right\">{total.value}</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useContext, useCallback, useState } from \"react\";\nimport { Fab } from \"@rmwc/fab\";\nimport { Modal, List, InputItem, DatePicker, Button } from \"antd-mobile\";\nimport enUs from \"antd-mobile/lib/date-picker/locale/en_US\";\nimport { RootContext } from \"./Provider\";\nimport { ActionTypes } from \"../actions\";\nimport { toTimeRangeIndex } from \"../util/converter\";\nimport styles from \"./InputButton.module.css\";\nimport classnames from \"classnames\";\nimport moment from \"moment\";\nexport const InputButton = () => {\n  const [visible, setVisible] = useState<boolean>(false);\n  const [datetime, setDatetime] = useState<Date>(new Date());\n  const [value, setValue] = useState<string>(\"\");\n  const { state, dispatch } = useContext(RootContext);\n  const onOpen = useCallback(() => {\n    setDatetime(new Date());\n    setVisible(true);\n  }, [setVisible]);\n  const onClose = useCallback(() => {\n    setVisible(false);\n  }, [setVisible]);\n  const onDatetimeChange = useCallback(\n    (date: Date) => {\n      setDatetime(date);\n    },\n    [setDatetime]\n  );\n  const onValueChange = useCallback(\n    (val: string) => {\n      setValue(val);\n    },\n    [setValue]\n  );\n  const onSubmit = useCallback(() => {\n    const num = Number(value) || 0;\n    if (num > 0 && dispatch) {\n      const item = {\n        datetime,\n        date: moment(datetime).format(\"YYYY-MM-DD\"),\n        value: num,\n        timeRangeIndex: toTimeRangeIndex(datetime)\n      };\n      dispatch({ type: ActionTypes.PUT_ITEM, payload: { item } });\n      setValue(\"\");\n      setVisible(false);\n    }\n  }, [dispatch, datetime, value, setVisible]);\n  return (\n    <>\n      <Fab icon=\"add\" onClick={onOpen} className={classnames(styles.top)} />\n      <Modal popup visible={visible} animationType=\"slide-up\" onClose={onClose}>\n        <List renderHeader={\"採尿量入力\"}>\n          <DatePicker\n            locale={enUs}\n            value={datetime}\n            onChange={onDatetimeChange}\n          >\n            <List.Item>日時</List.Item>\n          </DatePicker>\n          <InputItem\n            type={\"number\"}\n            onChange={onValueChange}\n            defaultValue={value}\n          >\n            採尿量\n          </InputItem>\n          <List.Item>\n            <Button onClick={onSubmit} type=\"primary\">\n              登録\n            </Button>\n          </List.Item>\n        </List>\n      </Modal>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"./components/Provider\";\nimport { ItemList } from \"./components/ItemList\";\nimport { InputButton } from \"./components/InputButton\";\nconst App = () => {\n  return (\n    <Provider>\n      <div className=\"container\">\n        <header>採尿レコーダー</header>\n        <ItemList />\n        <InputButton />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport \"antd-mobile/dist/antd-mobile.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"material-design-icons/iconfont/material-icons.css\";\nimport \"@material/fab/dist/mdc.fab.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"InputButton_top__1PvaW\"};"],"sourceRoot":""}
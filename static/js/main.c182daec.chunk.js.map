{"version":3,"sources":["actions/index.ts","store.ts","util/converter.ts","reducer.ts","AppDb.ts","sideEffector.ts","util/useSideEffector.ts","components/Provider.tsx","components/ItemList.tsx","components/InputButton.tsx","App.tsx","serviceWorker.ts","index.tsx","components/InputButton.module.css"],"names":["ActionTypes","initialState","itemListByDate","totalList","valueList","scrollBottomEvt","toTimeRangeIndex","datetime","Math","floor","moment","local","hour","toDateKey","date","timeRangeIndex","startOf","add","format","reducer","state","arguments","length","undefined","action","type","SET_ITEMS","items","payload","_","chain","groupBy","item","mapValues","value","Object","objectSpread","SET_TOTALS","totals","toConsumableArray","SCROLL_BOTTOM","Date","now","db","_Dexie","AppDatabase","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","version","stores","values","table","inherits","Dexie","loadItems","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","where","between","subtract","toDate","endOf","sortBy","sent","stop","_x","apply","loadTotals","_ref2","_callee2","_context2","toArray","_x2","calcTotal","_ref3","_callee3","query","totalDoc","dateKey","totalValue","_context3","get","sumBy","put","LOAD_TOTALS","_x3","_x4","sideEffector","PUT_ITEM","CALC_TOTAL","LOAD_ITEMS","dispatchSideEffector","dispatchSECaller","RootContext","createContext","Provider","children","_useSideEffector","slicedToArray","useCallback","dispatchSE","useSideEffector","useReducer","_useSideEffector2","useEffect","react_default","createElement","ItemsTotal","hasDayTotal","hasBottomEl","useContext","bottomEl","useRef","current","scrollIntoView","behavior","total","find","dayTotal","NaN","filter","Fragment","map","key","getTime","alignEnd","className","concat","timeRange","Number","isNaN","ref","ItemList","_useContext2$state","last","isEmpty","keys","sort","len","b","idx","flatten","set","stickyRows","style","height","ItemList_ItemsTotal","assign","InputButton","_useState","useState","_useState2","visible","setVisible","_useState3","_useState4","setDatetime","_useState5","_useState6","setValue","_useContext","onOpen","onClose","onDatetimeChange","onValueChange","val","onSubmit","num","classnames","styles","top","fab_next","icon","onClick","es","closable","popup","animationType","modal","renderHeader","locale","enUs","onChange","Item","defaultValue","App","Provider_Provider","ItemList_ItemList","InputButton_InputButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c182daec.chunk.js","sourcesContent":["import { IItem, ITotal, TotalQuery } from \"../AppDb\";\nexport enum ActionTypes {\n  PUT_ITEM = \"PUT_ITEM\",\n  LOAD_ITEMS = \"LOAD_ITEMS\",\n  SET_ITEMS = \"SET_ITEMS\",\n  PUT_TOTAL = \"PUT_TOTAL\",\n  LOAD_TOTALS = \"LOAD_TOTALS\",\n  SET_TOTALS = \"SET_TOTALS\",\n  CALC_TOTAL = \"CALC_TOTAL\",\n  SCROLL_BOTTOM = \"SCROLL_BOTTOM\"\n}\n\nexport interface IAction {\n  type: ActionTypes;\n  payload?: any;\n  meta?: { [key: string]: any };\n}\nexport interface PUT_ITEM extends IAction {\n  type: ActionTypes.PUT_ITEM;\n  payload: { item: IItem };\n}\nexport interface LOAD_ITEMS extends IAction {\n  type: ActionTypes.LOAD_ITEMS;\n}\nexport interface SET_ITEMS extends IAction {\n  type: ActionTypes.SET_ITEMS;\n  payload: { items: IItem[] };\n}\nexport interface PUT_TOTAL extends IAction {\n  type: ActionTypes.PUT_TOTAL;\n  payload: { total: ITotal };\n}\nexport interface LOAD_TOTALS extends IAction {\n  type: ActionTypes.LOAD_TOTALS;\n}\nexport interface SET_TOTALS extends IAction {\n  type: ActionTypes.SET_TOTALS;\n  payload: { totals: ITotal[] };\n}\nexport interface CALC_TOTAL extends IAction {\n  type: ActionTypes.CALC_TOTAL;\n  payload: { query: TotalQuery };\n}\nexport interface SCROLL_BOTTOM extends IAction {\n  type: ActionTypes.SCROLL_BOTTOM;\n}\n\nexport type Actions =\n  | PUT_ITEM\n  | LOAD_ITEMS\n  | SET_ITEMS\n  | PUT_TOTAL\n  | LOAD_TOTALS\n  | SET_TOTALS\n  | CALC_TOTAL\n  | SCROLL_BOTTOM;\n","import { IItem, ITotal, IValue } from \"./AppDb\";\nimport _, { Dictionary } from \"lodash\";\nexport type IItemListByDate = Dictionary<Dictionary<IItem[]>>;\n\nexport interface AppState {\n  itemListByDate: IItemListByDate;\n  totalList: ITotal[];\n  valueList: IValue[];\n  scrollBottomEvt: number;\n}\n\nexport const initialState: AppState = {\n  itemListByDate: {},\n  totalList: [],\n  valueList: [],\n  scrollBottomEvt: 0\n};\n","import moment from \"moment\";\nconst TIME_SPAN = 6;\nexport const toTimeRangeIndex = (datetime: Date) =>\n  Math.floor(\n    moment(datetime)\n      .local()\n      .hour() / TIME_SPAN\n  );\n\nexport const toDateKey = (date: string, timeRangeIndex: number) =>\n  moment(date)\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * (timeRangeIndex - 1), \"hours\")\n    .format(\"YYYY-MM-DD\");\n\nexport const toStartAt = (date: string, timeRangeIndex: number) =>\n  moment(date)\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * timeRangeIndex, \"hours\")\n    .format(\"YYYY-MM-DD\");\n\nexport const timeRange = (timeRangeIndex: number) =>\n  `${moment()\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * timeRangeIndex, \"hours\")\n    .format(\"HH:mm\")}-${moment()\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * (timeRangeIndex + 1), \"hours\")\n    .format(\"HH:mm\")}`;\n","import { initialState } from \"./store\";\nimport { ActionTypes, Actions } from \"./actions\";\nimport _ from \"lodash\";\nimport { toDateKey } from \"./util/converter\";\nexport const reducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.SET_ITEMS: {\n      const { items } = action.payload;\n      const itemListByDate = _.chain(items)\n        .groupBy(item => toDateKey(item.date, item.timeRangeIndex))\n        .mapValues(items => _.groupBy(items, \"timeRangeIndex\"))\n        .value();\n      return { ...state, itemListByDate };\n    }\n    case ActionTypes.SET_TOTALS: {\n      const { totals } = action.payload;\n      const totalList = [...totals];\n      return { ...state, totalList };\n    }\n    case ActionTypes.SCROLL_BOTTOM: {\n      return { ...state, scrollBottomEvt: Date.now() };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import Dexie from \"dexie\";\nexport interface IItem {\n  id?: number;\n  datetime: Date;\n  date: string;\n  timeRangeIndex: number;\n  value: number;\n}\nexport interface TotalQuery {\n  date: string; // YYYY-MM-DD\n  timeRangeIndex: number;\n}\nexport interface ITotal extends TotalQuery {\n  id?: number;\n  value: number;\n  dateKey: string;\n}\nexport interface IValue {\n  id?: number;\n  value: number;\n}\n\nexport class AppDatabase extends Dexie {\n  items: Dexie.Table<IItem, number>;\n  totals: Dexie.Table<ITotal, number>;\n  constructor() {\n    super(\"SainyoRecorderDatabase\");\n    this.version(1).stores({\n      items: \"++id, date, datetime, timeRangeIndex,value\",\n      totals: \"++id, date, timeRangeIndex, value, dateKey\",\n      values: \"++id, value\"\n    });\n    this.items = this.table(\"items\");\n    this.totals = this.table(\"totals\");\n  }\n}\nexport const db = new AppDatabase();\n","import { Dispatch } from \"react\";\nimport { SideEffector } from \"./util/useSideEffector\";\nimport { AppState } from \"./store\";\nimport { Actions, ActionTypes } from \"./actions\";\nimport { db, TotalQuery } from \"./AppDb\";\nimport { toDateKey } from \"./util/converter\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nconst DISPLAY_DAY_SPAN = 3;\nconst loadItems = async (dispatch: Dispatch<Actions>) => {\n  const items = await db.items\n    .where(\"datetime\")\n    .between(\n      moment()\n        .local()\n        .startOf(\"days\")\n        .subtract(DISPLAY_DAY_SPAN, \"days\")\n        .toDate(),\n      moment()\n        .local()\n        .endOf(\"days\")\n        .toDate()\n    )\n    .sortBy(\"dattime\");\n\n  dispatch({ type: ActionTypes.SET_ITEMS, payload: { items } });\n};\nconst loadTotals = async (dispatch: Dispatch<Actions>) => {\n  const totals = await db.totals.toArray();\n  dispatch({ type: ActionTypes.SET_TOTALS, payload: { totals } });\n  dispatch({ type: ActionTypes.SCROLL_BOTTOM });\n};\nconst calcTotal = async (dispatch: Dispatch<Actions>, query: TotalQuery) => {\n  const totalDoc = await db.totals.get({ ...query });\n  const dateKey = toDateKey(query.date, query.timeRangeIndex);\n  const values = await db.items.where({ ...query }).toArray();\n  const totalValue = _.sumBy(values, \"value\");\n  await db.totals.put({ ...totalDoc, ...query, value: totalValue, dateKey });\n  dispatch({ type: ActionTypes.LOAD_TOTALS });\n};\n\nexport const sideEffector: SideEffector<AppState, Actions> = (\n  action,\n  dispatch,\n  state\n) => {\n  switch (action.type) {\n    case ActionTypes.PUT_ITEM: {\n      const { item } = action.payload;\n      const { date, timeRangeIndex } = item;\n      db.items.put(item);\n      const query: TotalQuery = { date, timeRangeIndex };\n      dispatch({ type: ActionTypes.CALC_TOTAL, payload: { query } });\n      dispatch({ type: ActionTypes.LOAD_ITEMS });\n      return;\n    }\n    case ActionTypes.LOAD_ITEMS: {\n      loadItems(dispatch);\n      return;\n    }\n    case ActionTypes.CALC_TOTAL: {\n      calcTotal(dispatch, action.payload.query);\n      return;\n    }\n    case ActionTypes.LOAD_TOTALS: {\n      loadTotals(dispatch);\n      return;\n    }\n  }\n};\n","import { Dispatch, useCallback } from \"react\";\nexport type SideEffector<S, A> = (\n  action: A,\n  dispatch: Dispatch<A>,\n  state: S\n) => void;\nexport const useSideEffector = <S, A>(\n  [state, dispatch]: [S, Dispatch<A>],\n  sideEffector: SideEffector<S, A>\n): [S, Dispatch<A>] => {\n  const dispatchSECaller = useCallback((action: A) => {\n    dispatchSE(action);\n  }, []);\n  const dispatchSE = useCallback(\n    dispatchSideEffector(state, dispatch, sideEffector, dispatchSECaller),\n    [state, dispatch, dispatchSECaller]\n  );\n  return [state, dispatchSE];\n};\nconst dispatchSideEffector = <S, A>(\n  state: S,\n  dispatch: Dispatch<A>,\n  sideEffector: SideEffector<S, A>,\n  dispatchSECaller: Dispatch<A>\n) => (action: A) => {\n  dispatch(action);\n  sideEffector(action, dispatchSECaller, state);\n};\n","import React, {\n  createContext,\n  useEffect,\n  useCallback,\n  useReducer,\n  Dispatch\n} from \"react\";\nimport { initialState, AppState } from \"../store\";\nimport { reducer } from \"../reducer\";\nimport { Actions, ActionTypes } from \"../actions\";\nimport { sideEffector } from \"../sideEffector\";\nimport { useSideEffector } from \"../util/useSideEffector\";\ninterface IRootContext {\n  state: AppState;\n  dispatch?: Dispatch<Actions>;\n}\nexport const RootContext = createContext<IRootContext>({\n  state: initialState\n});\n\nexport const Provider = ({ children }: { children: React.ReactNode }) => {\n  const [state, dispatch] = useSideEffector(\n    useReducer(reducer, initialState),\n    sideEffector\n  );\n  useEffect(() => {\n    dispatch({ type: ActionTypes.LOAD_ITEMS });\n    dispatch({ type: ActionTypes.LOAD_TOTALS });\n  }, []);\n  const value: IRootContext = {\n    state,\n    dispatch\n  };\n  return <RootContext.Provider value={value}>{children}</RootContext.Provider>;\n};\n","import React, { useContext, useRef, useEffect } from \"react\";\nimport {\n  DataTable,\n  DataTableBody,\n  DataTableCell,\n  DataTableContent,\n  DataTableHead,\n  DataTableHeadCell,\n  DataTableRow\n} from \"@rmwc/data-table\";\nimport { RootContext } from \"./Provider\";\nimport { ITotal, IItem } from \"../AppDb\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport { timeRange } from \"../util/converter\";\n\ninterface IItemKyeIdx {\n  dateKey: string;\n  timeRangeIndex: number;\n  hasDayTotal: boolean;\n  items: IItem[];\n  hasBottomEl: boolean;\n}\nconst ItemsTotal = ({\n  items,\n  totals,\n  hasDayTotal,\n  dateKey,\n  timeRangeIndex,\n  hasBottomEl\n}: {\n  items: IItem[];\n  totals: ITotal[];\n  dateKey: string;\n  hasDayTotal: boolean;\n  timeRangeIndex: number;\n  hasBottomEl: boolean;\n}) => {\n  const {\n    state: { scrollBottomEvt }\n  } = useContext(RootContext);\n\n  const bottomEl = useRef<HTMLElement>(null);\n  useEffect(() => {\n    if (bottomEl.current && hasBottomEl) {\n      bottomEl.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [bottomEl, scrollBottomEvt]);\n\n  const total = _.find(totals, { dateKey, timeRangeIndex });\n  let dayTotal: number = NaN;\n  if (hasDayTotal) {\n    dayTotal = _.chain(totals)\n      .filter({ dateKey })\n      .sumBy(\"value\")\n      .value();\n  }\n\n  return (\n    <>\n      {items.map(item => (\n        <DataTableRow key={item.datetime.getTime()}>\n          <DataTableCell>\n            {moment(item.datetime)\n              .local()\n              .format(\"MM/DD\")}\n          </DataTableCell>\n          <DataTableCell>\n            {moment(item.datetime)\n              .local()\n              .format(\"HH:mm\")}\n          </DataTableCell>\n          <DataTableCell alignEnd>{item.value}</DataTableCell>\n        </DataTableRow>\n      ))}\n      {total && (\n        <DataTableRow className=\"table-info\">\n          <DataTableCell>{moment(total.date).format(\"MM/DD\")}</DataTableCell>\n          <DataTableCell>{timeRange(total.timeRangeIndex)}</DataTableCell>\n          <DataTableCell alignEnd>{total.value}</DataTableCell>\n        </DataTableRow>\n      )}\n      {!Number.isNaN(dayTotal) && (\n        <DataTableRow className=\"table-success\" ref={bottomEl}>\n          <DataTableCell>{moment(dateKey).format(\"MM/DD\")}</DataTableCell>\n          <DataTableCell>合計(06:00-06:00)</DataTableCell>\n          <DataTableCell alignEnd>{dayTotal}</DataTableCell>\n        </DataTableRow>\n      )}\n    </>\n  );\n};\nexport const ItemList = () => {\n  const {\n    state: { totalList, itemListByDate }\n  } = useContext(RootContext);\n  const total = _.last(totalList);\n  const dateKey = total\n    ? total.dateKey\n    : moment()\n        .local()\n        .format(\"YYYY-MM-DD\");\n  let items: IItemKyeIdx[] = [];\n  if (!_.isEmpty(itemListByDate)) {\n    items = _.chain(itemListByDate)\n      .keys()\n      .sort()\n      .map(dateKey => ({ dateKey, items: itemListByDate[dateKey] }))\n      .map(({ dateKey, items }) => {\n        const len = _.keys(items).length;\n        return _.chain(items)\n          .keys()\n          .map(Number)\n          .sort((a, b) => {\n            if (a === 0) {\n              return 1;\n            } else if (b === 0) {\n              return -1;\n            } else if (a > b) {\n              return 1;\n            } else if (a < b) {\n              return -1;\n            } else {\n              return 0;\n            }\n          })\n          .map((timeRangeIndex, idx) => ({\n            dateKey,\n            timeRangeIndex,\n            items: items[timeRangeIndex],\n            hasDayTotal: idx + 1 === len,\n            hasBottomEl: false\n          }))\n          .value();\n      })\n      .flatten()\n      .value();\n    _.set(_.last(items) || {}, \"hasBottomEl\", true);\n  }\n  return (\n    <DataTable stickyRows={1} style={{ height: \"calc(100vh - 100px)\" }}>\n      <DataTableContent>\n        <DataTableHead>\n          <DataTableRow>\n            <DataTableHeadCell>日付</DataTableHeadCell>\n            <DataTableHeadCell>時間</DataTableHeadCell>\n            <DataTableHeadCell>採尿量</DataTableHeadCell>\n          </DataTableRow>\n        </DataTableHead>\n        <DataTableBody>\n          {items.map(item => (\n            <ItemsTotal\n              {...item}\n              key={`${item.dateKey}-${item.timeRangeIndex}`}\n              totals={totalList}\n            />\n          ))}\n        </DataTableBody>\n      </DataTableContent>\n    </DataTable>\n  );\n};\n","import React, { useContext, useCallback, useState } from \"react\";\nimport { Fab } from \"@rmwc/fab\";\nimport { Modal, List, InputItem, DatePicker, Button } from \"antd-mobile\";\nimport enUs from \"antd-mobile/lib/date-picker/locale/en_US\";\nimport { RootContext } from \"./Provider\";\nimport { ActionTypes } from \"../actions\";\nimport { toTimeRangeIndex } from \"../util/converter\";\nimport styles from \"./InputButton.module.css\";\nimport classnames from \"classnames\";\nimport moment from \"moment\";\nexport const InputButton = () => {\n  const [visible, setVisible] = useState<boolean>(false);\n  const [datetime, setDatetime] = useState<Date>(new Date());\n  const [value, setValue] = useState<string>(\"\");\n  const { state, dispatch } = useContext(RootContext);\n  const onOpen = useCallback(() => {\n    setDatetime(new Date());\n    setVisible(true);\n  }, [setVisible]);\n  const onClose = useCallback(() => {\n    setVisible(false);\n  }, [setVisible]);\n  const onDatetimeChange = useCallback(\n    (date: Date) => {\n      setDatetime(date);\n    },\n    [setDatetime]\n  );\n  const onValueChange = useCallback(\n    (val: string) => {\n      setValue(val);\n    },\n    [setValue]\n  );\n  const onSubmit = useCallback(() => {\n    const num = Number(value) || 0;\n    if (num > 0 && dispatch) {\n      const item = {\n        datetime,\n        date: moment(datetime).format(\"YYYY-MM-DD\"),\n        value: num,\n        timeRangeIndex: toTimeRangeIndex(datetime)\n      };\n      dispatch({ type: ActionTypes.PUT_ITEM, payload: { item } });\n      setValue(\"\");\n      setVisible(false);\n    }\n  }, [dispatch, datetime, value, setVisible]);\n  return (\n    <div className={classnames(styles.top)}>\n      <Fab icon=\"add\" onClick={onOpen} />\n      <Modal\n        closable={true}\n        popup\n        visible={visible}\n        animationType=\"slide-up\"\n        onClose={onClose}\n        className={classnames(styles.modal)}\n      >\n        <List renderHeader={\"採尿量入力\"}>\n          <DatePicker\n            locale={enUs}\n            value={datetime}\n            onChange={onDatetimeChange}\n          >\n            <List.Item>日時</List.Item>\n          </DatePicker>\n          <InputItem\n            type={\"number\"}\n            onChange={onValueChange}\n            defaultValue={value}\n          >\n            採尿量\n          </InputItem>\n          <List.Item>\n            <Button onClick={onSubmit} type=\"primary\">\n              登録\n            </Button>\n          </List.Item>\n        </List>\n      </Modal>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"./components/Provider\";\nimport { ItemList } from \"./components/ItemList\";\nimport { InputButton } from \"./components/InputButton\";\nconst App = () => {\n  return (\n    <Provider>\n      <div className=\"container\">\n        <header>採尿量レコーダー</header>\n        <ItemList />\n      </div>\n      <InputButton />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport \"antd-mobile/dist/antd-mobile.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"material-design-icons/iconfont/material-icons.css\";\nimport \"@material/fab/dist/mdc.fab.css\";\nimport \"@rmwc/data-table/data-table.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"InputButton_top__1PvaW\",\"modal\":\"InputButton_modal__4hQtw\"};"],"sourceRoot":""}
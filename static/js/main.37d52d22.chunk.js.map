{"version":3,"sources":["components/InputButton.module.css","actions/index.ts","store.ts","reducer.ts","AppDb.ts","util/converter.ts","sideEffector.ts","util/useSideEffector.ts","components/Provider.tsx","components/ItemList.tsx","components/InputButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","top","ActionTypes","initialState","itemList","itemListByDate","totalList","valueList","scrollBottomEvt","reducer","state","arguments","length","undefined","action","type","PUT_ITEM","item","payload","_","sortBy","concat","Object","toConsumableArray","objectSpread","SET_ITEMS","items","SET_TOTALS","totals","SCROLL_BOTTOM","Date","now","db","_Dexie","AppDatabase","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","version","stores","values","table","inherits","Dexie","toTimeRangeIndex","datetime","Math","floor","moment","local","hour","loadItems","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","where","between","startOf","subtract","toDate","endOf","sent","stop","_x","apply","loadTotals","_ref2","_callee2","_context2","toArray","_x2","calcTotal","_ref3","_callee3","query","totalDoc","dateKey","totalValue","_context3","get","date","timeRangeIndex","add","format","sumBy","put","value","LOAD_TOTALS","_x3","_x4","sideEffector","CALC_TOTAL","LOAD_ITEMS","dispatchSideEffector","dispatchSECaller","RootContext","createContext","Provider","children","_useSideEffector","slicedToArray","useCallback","dispatchSE","useSideEffector","useReducer","_useSideEffector2","useEffect","react_default","createElement","ItemList","_useContext$state","useContext","total","last","dayTotal","chain","filter","valueOf","bottomEl","useRef","console","log","current","scrollIntoView","behavior","stickyRows","style","height","map","key","getTime","alignEnd","Fragment","className","ref","InputButton","_useState","useState","_useState2","visible","setVisible","_useState3","_useState4","setDatetime","_useState5","_useState6","setValue","_useContext","onOpen","onClose","onDatetimeChange","onValueChange","val","onSubmit","num","Number","classnames","styles","fab_next","icon","onClick","es","popup","animationType","renderHeader","locale","enUs","onChange","Item","defaultValue","App","Provider_Provider","ItemList_ItemList","InputButton_InputButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37d52d22.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"top\":\"InputButton_top__1PvaW\"};","import { IItem, ITotal, TotalQuery } from \"../AppDb\";\nexport enum ActionTypes {\n  PUT_ITEM = \"PUT_ITEM\",\n  LOAD_ITEMS = \"LOAD_ITEMS\",\n  SET_ITEMS = \"SET_ITEMS\",\n  PUT_TOTAL = \"PUT_TOTAL\",\n  LOAD_TOTALS = \"LOAD_TOTALS\",\n  SET_TOTALS = \"SET_TOTALS\",\n  CALC_TOTAL = \"CALC_TOTAL\",\n  SCROLL_BOTTOM = \"SCROLL_BOTTOM\"\n}\n\nexport interface IAction {\n  type: ActionTypes;\n  payload?: any;\n  meta?: { [key: string]: any };\n}\nexport interface PUT_ITEM extends IAction {\n  type: ActionTypes.PUT_ITEM;\n  payload: { item: IItem };\n}\nexport interface LOAD_ITEMS extends IAction {\n  type: ActionTypes.LOAD_ITEMS;\n}\nexport interface SET_ITEMS extends IAction {\n  type: ActionTypes.SET_ITEMS;\n  payload: { items: IItem[] };\n}\nexport interface PUT_TOTAL extends IAction {\n  type: ActionTypes.PUT_TOTAL;\n  payload: { total: ITotal };\n}\nexport interface LOAD_TOTALS extends IAction {\n  type: ActionTypes.LOAD_TOTALS;\n}\nexport interface SET_TOTALS extends IAction {\n  type: ActionTypes.SET_TOTALS;\n  payload: { totals: ITotal[] };\n}\nexport interface CALC_TOTAL extends IAction {\n  type: ActionTypes.CALC_TOTAL;\n  payload: { query: TotalQuery };\n}\nexport interface SCROLL_BOTTOM extends IAction {\n  type: ActionTypes.SCROLL_BOTTOM;\n}\n\nexport type Actions =\n  | PUT_ITEM\n  | LOAD_ITEMS\n  | SET_ITEMS\n  | PUT_TOTAL\n  | LOAD_TOTALS\n  | SET_TOTALS\n  | CALC_TOTAL\n  | SCROLL_BOTTOM;\n","import { IItem, ITotal, IValue } from \"./AppDb\";\nexport interface IItemListByDate {\n  [dateKey: string]: {\n    [timeRangeIndex: number]: IItem;\n  };\n}\nexport interface AppState {\n  itemList: IItem[];\n  itemListByDate: IItemListByDate;\n  totalList: ITotal[];\n  valueList: IValue[];\n  scrollBottomEvt: number;\n}\n\nexport const initialState: AppState = {\n  itemList: [],\n  itemListByDate: {},\n  totalList: [],\n  valueList: [],\n  scrollBottomEvt: 0\n};\n","import { initialState } from \"./store\";\nimport { ActionTypes, Actions } from \"./actions\";\nimport _ from \"lodash\";\nexport const reducer = (state = initialState, action: Actions) => {\n  switch (action.type) {\n    case ActionTypes.PUT_ITEM: {\n      const { item } = action.payload;\n      const itemList = _.sortBy([...state.itemList, item], \"datetime\");\n      return { ...state, itemList };\n    }\n    case ActionTypes.SET_ITEMS: {\n      const { items } = action.payload;\n      const itemList = [...items];\n\n      return { ...state, itemList };\n    }\n    case ActionTypes.SET_TOTALS: {\n      const { totals } = action.payload;\n      const totalList = [...totals];\n      return { ...state, totalList };\n    }\n    case ActionTypes.SCROLL_BOTTOM: {\n      return { ...state, scrollBottomEvt: Date.now() };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import Dexie from \"dexie\";\nexport interface IItem {\n  id?: number;\n  datetime: Date;\n  date: string;\n  timeRangeIndex: number;\n  value: number;\n}\nexport interface TotalQuery {\n  date: string; // YYYY-MM-DD\n  timeRangeIndex: number;\n}\nexport interface ITotal extends TotalQuery {\n  id?: number;\n  value: number;\n  dateKey: string;\n}\nexport interface IValue {\n  id?: number;\n  value: number;\n}\n\nexport class AppDatabase extends Dexie {\n  items: Dexie.Table<IItem, number>;\n  totals: Dexie.Table<ITotal, number>;\n  constructor() {\n    super(\"SainyoRecorderDatabase\");\n    this.version(1).stores({\n      items: \"++id, date, datetime, timeRangeIndex,value\",\n      totals: \"++id, date, timeRangeIndex, value, dateKey\",\n      values: \"++id, value\"\n    });\n    this.items = this.table(\"items\");\n    this.totals = this.table(\"totals\");\n  }\n}\nexport const db = new AppDatabase();\n","import moment from \"moment\";\nconst TIME_SPAN = 6;\nexport const toTimeRangeIndex = (datetime: Date) =>\n  Math.floor(\n    moment(datetime)\n      .local()\n      .hour() / TIME_SPAN\n  );\n\nexport const toDateKey = (date: string, timeRangeIndex: number) =>\n  moment(date)\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * (timeRangeIndex - 1), \"hours\")\n    .format(\"YYYY-MM-DD\");\n\nexport const toStartAt = (date: string, timeRangeIndex: number) =>\n  moment(date)\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * timeRangeIndex, \"hours\")\n    .format(\"YYYY-MM-DD\");\n\nexport const timeRange = (timeRangeIndex: number) =>\n  `${moment()\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * timeRangeIndex, \"hours\")\n    .format(\"HH:mm\")}-${moment()\n    .local()\n    .startOf(\"days\")\n    .add(TIME_SPAN * (timeRangeIndex + 1), \"hours\")\n    .format(\"HH:mm\")}`;\n","import { Dispatch } from \"react\";\nimport { SideEffector } from \"./util/useSideEffector\";\nimport { AppState } from \"./store\";\nimport { Actions, ActionTypes } from \"./actions\";\nimport { db, TotalQuery } from \"./AppDb\";\nimport { toDateKey } from \"./util/converter\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nconst DISPLAY_DAY_SPAN = 5;\nconst loadItems = async (dispatch: Dispatch<Actions>) => {\n  const items = await db.items\n    .where(\"datetime\")\n    .between(\n      moment()\n        .local()\n        .startOf(\"days\")\n        .subtract(DISPLAY_DAY_SPAN, \"days\")\n        .toDate(),\n      moment()\n        .local()\n        .endOf(\"days\")\n        .toDate()\n    )\n    .sortBy(\"dattime\");\n\n  dispatch({ type: ActionTypes.SET_ITEMS, payload: { items } });\n};\nconst loadTotals = async (dispatch: Dispatch<Actions>) => {\n  const totals = await db.totals.toArray();\n  dispatch({ type: ActionTypes.SET_TOTALS, payload: { totals } });\n};\nconst calcTotal = async (dispatch: Dispatch<Actions>, query: TotalQuery) => {\n  const totalDoc = await db.totals.get({ ...query });\n  const dateKey = toDateKey(query.date, query.timeRangeIndex);\n  const values = await db.items.where({ ...query }).toArray();\n  const totalValue = _.sumBy(values, \"value\");\n  await db.totals.put({ ...totalDoc, ...query, value: totalValue, dateKey });\n  dispatch({ type: ActionTypes.LOAD_TOTALS });\n};\n\nexport const sideEffector: SideEffector<AppState, Actions> = (\n  action,\n  dispatch,\n  state\n) => {\n  switch (action.type) {\n    case ActionTypes.PUT_ITEM: {\n      const { item } = action.payload;\n      const { date, timeRangeIndex } = item;\n      db.items.put(item);\n      const query: TotalQuery = { date, timeRangeIndex };\n      dispatch({ type: ActionTypes.CALC_TOTAL, payload: { query } });\n      return;\n    }\n    case ActionTypes.LOAD_ITEMS: {\n      loadItems(dispatch);\n      return;\n    }\n    case ActionTypes.CALC_TOTAL: {\n      calcTotal(dispatch, action.payload.query);\n      return;\n    }\n    case ActionTypes.LOAD_TOTALS: {\n      loadTotals(dispatch);\n      return;\n    }\n  }\n};\n","import { Dispatch, useCallback } from \"react\";\nexport type SideEffector<S, A> = (\n  action: A,\n  dispatch: Dispatch<A>,\n  state: S\n) => void;\nexport const useSideEffector = <S, A>(\n  [state, dispatch]: [S, Dispatch<A>],\n  sideEffector: SideEffector<S, A>\n): [S, Dispatch<A>] => {\n  const dispatchSECaller = useCallback((action: A) => {\n    dispatchSE(action);\n  }, []);\n  const dispatchSE = useCallback(\n    dispatchSideEffector(state, dispatch, sideEffector, dispatchSECaller),\n    [state, dispatch, dispatchSECaller]\n  );\n  return [state, dispatchSE];\n};\nconst dispatchSideEffector = <S, A>(\n  state: S,\n  dispatch: Dispatch<A>,\n  sideEffector: SideEffector<S, A>,\n  dispatchSECaller: Dispatch<A>\n) => (action: A) => {\n  dispatch(action);\n  sideEffector(action, dispatchSECaller, state);\n};\n","import React, {\n  createContext,\n  useEffect,\n  useCallback,\n  useReducer,\n  Dispatch\n} from \"react\";\nimport { initialState, AppState } from \"../store\";\nimport { reducer } from \"../reducer\";\nimport { Actions, ActionTypes } from \"../actions\";\nimport { sideEffector } from \"../sideEffector\";\nimport { useSideEffector } from \"../util/useSideEffector\";\ninterface IRootContext {\n  state: AppState;\n  dispatch?: Dispatch<Actions>;\n}\nexport const RootContext = createContext<IRootContext>({\n  state: initialState\n});\n\nexport const Provider = ({ children }: { children: React.ReactNode }) => {\n  const [state, dispatch] = useSideEffector(\n    useReducer(reducer, initialState),\n    sideEffector\n  );\n  useEffect(() => {\n    dispatch({ type: ActionTypes.LOAD_ITEMS });\n    dispatch({ type: ActionTypes.LOAD_TOTALS });\n  }, []);\n  const value: IRootContext = {\n    state,\n    dispatch\n  };\n  return <RootContext.Provider value={value}>{children}</RootContext.Provider>;\n};\n","import React, { useContext, useRef, useEffect } from \"react\";\nimport {\n  DataTable,\n  DataTableBody,\n  DataTableCell,\n  DataTableContent,\n  DataTableHead,\n  DataTableHeadCell,\n  DataTableRow\n} from \"@rmwc/data-table\";\nimport { RootContext } from \"./Provider\";\nimport { ITotal, IItem } from \"../AppDb\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport { timeRange } from \"../util/converter\";\nconst ItemsTotal = ({ items, total }: { items: IItem[]; total: ITotal }) => {\n  return (\n    <>\n      {items.map((item, idx) => {\n        <tr key={idx}>\n          <td>\n            {moment(item.datetime)\n              .local()\n              .format(\"MM/DD\")}\n          </td>\n          <td>\n            {moment(item.datetime)\n              .local()\n              .format(\"HH:mm\")}\n          </td>\n          <td>{item.value}</td>\n        </tr>;\n      })}\n    </>\n  );\n};\nexport const ItemList = () => {\n  const {\n    state: { itemList, totalList, scrollBottomEvt }\n  } = useContext(RootContext);\n  const total = _.last(totalList);\n  const dateKey = total\n    ? total.dateKey\n    : moment()\n        .local()\n        .format(\"YYYY-MM-DD\");\n  const dayTotal = _.chain(totalList)\n    .filter({ dateKey })\n    .sumBy(\"value\")\n    .valueOf();\n  const bottomEl = useRef<HTMLElement>(null);\n  useEffect(() => {\n    console.log(\"btm\", bottomEl);\n    if (bottomEl.current) {\n      bottomEl.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [bottomEl, scrollBottomEvt]);\n  return (\n    <DataTable stickyRows={1} style={{ height: \"calc(100vh - 100px)\" }}>\n      <DataTableContent>\n        <DataTableHead>\n          <DataTableRow>\n            <DataTableHeadCell>日付</DataTableHeadCell>\n            <DataTableHeadCell>時間</DataTableHeadCell>\n            <DataTableHeadCell>採尿量</DataTableHeadCell>\n          </DataTableRow>\n        </DataTableHead>\n        <DataTableBody>\n          {itemList.map(item => (\n            <DataTableRow key={item.datetime.getTime()}>\n              <DataTableCell>\n                {moment(item.datetime)\n                  .local()\n                  .format(\"MM/DD\")}\n              </DataTableCell>\n              <DataTableCell>\n                {moment(item.datetime)\n                  .local()\n                  .format(\"HH:mm\")}\n              </DataTableCell>\n              <DataTableCell alignEnd>{item.value}</DataTableCell>\n            </DataTableRow>\n          ))}\n          {total && (\n            <>\n              <DataTableRow className=\"table-info\">\n                <DataTableCell>\n                  {moment(total.date).format(\"MM/DD\")}\n                </DataTableCell>\n                <DataTableCell>{timeRange(total.timeRangeIndex)}</DataTableCell>\n                <DataTableCell alignEnd>{total.value}</DataTableCell>\n              </DataTableRow>\n              <DataTableRow ref={bottomEl} className=\"table-success\">\n                <DataTableCell>\n                  {moment(total.dateKey).format(\"MM/DD\")}\n                </DataTableCell>\n                <DataTableCell>合計(06:00-06:00)</DataTableCell>\n                <DataTableCell alignEnd>{dayTotal}</DataTableCell>\n              </DataTableRow>\n            </>\n          )}\n        </DataTableBody>\n      </DataTableContent>\n    </DataTable>\n  );\n  // return (\n  //   <table className=\"table\">\n  //     <thead>\n  //       <tr>\n  //         <th>日付</th>\n  //         <th>時間</th>\n  //         <th className=\"text-right\">採尿量</th>\n  //       </tr>\n  //     </thead>\n  //     <tbody>\n  //       {itemList.map(item => (\n  //         <tr key={item.datetime.getTime()}>\n  //           <td>\n  //             {moment(item.datetime)\n  //               .local()\n  //               .format(\"MM/DD\")}\n  //           </td>\n  //           <td>\n  //             {moment(item.datetime)\n  //               .local()\n  //               .format(\"HH:mm\")}\n  //           </td>\n  //           <td className=\"text-right\">{item.value}</td>\n  //         </tr>\n  //       ))}\n  //       {total && (\n  //         <>\n  //           <tr className=\"table-info\">\n  //             <td>{moment(total.date).format(\"MM/DD\")}</td>\n  //             <td>{timeRange(total.timeRangeIndex)}</td>\n  //             <td className=\"text-right\">{total.value}</td>\n  //           </tr>\n  //           <tr className=\"table-success\">\n  //             <td>{moment(total.dateKey).format(\"MM/DD\")}</td>\n  //             <td>合計(06:00-06:00)</td>\n  //             <td className=\"text-right\">{dayTotal}</td>\n  //           </tr>\n  //         </>\n  //       )}\n  //     </tbody>\n  //   </table>\n  // );\n};\n","import React, { useContext, useCallback, useState } from \"react\";\nimport { Fab } from \"@rmwc/fab\";\nimport { Modal, List, InputItem, DatePicker, Button } from \"antd-mobile\";\nimport enUs from \"antd-mobile/lib/date-picker/locale/en_US\";\nimport { RootContext } from \"./Provider\";\nimport { ActionTypes } from \"../actions\";\nimport { toTimeRangeIndex } from \"../util/converter\";\nimport styles from \"./InputButton.module.css\";\nimport classnames from \"classnames\";\nimport moment from \"moment\";\nexport const InputButton = () => {\n  const [visible, setVisible] = useState<boolean>(false);\n  const [datetime, setDatetime] = useState<Date>(new Date());\n  const [value, setValue] = useState<string>(\"\");\n  const { state, dispatch } = useContext(RootContext);\n  const onOpen = useCallback(() => {\n    setDatetime(new Date());\n    setVisible(true);\n  }, [setVisible]);\n  const onClose = useCallback(() => {\n    setVisible(false);\n  }, [setVisible]);\n  const onDatetimeChange = useCallback(\n    (date: Date) => {\n      setDatetime(date);\n    },\n    [setDatetime]\n  );\n  const onValueChange = useCallback(\n    (val: string) => {\n      setValue(val);\n    },\n    [setValue]\n  );\n  const onSubmit = useCallback(() => {\n    const num = Number(value) || 0;\n    if (num > 0 && dispatch) {\n      const item = {\n        datetime,\n        date: moment(datetime).format(\"YYYY-MM-DD\"),\n        value: num,\n        timeRangeIndex: toTimeRangeIndex(datetime)\n      };\n      dispatch({ type: ActionTypes.PUT_ITEM, payload: { item } });\n      setValue(\"\");\n      setVisible(false);\n      dispatch({ type: ActionTypes.SCROLL_BOTTOM });\n    }\n  }, [dispatch, datetime, value, setVisible]);\n  return (\n    <div className={classnames(styles.top)}>\n      <Fab icon=\"add\" onClick={onOpen} />\n      <Modal popup visible={visible} animationType=\"slide-up\" onClose={onClose}>\n        <List renderHeader={\"採尿量入力\"}>\n          <DatePicker\n            locale={enUs}\n            value={datetime}\n            onChange={onDatetimeChange}\n          >\n            <List.Item>日時</List.Item>\n          </DatePicker>\n          <InputItem\n            type={\"number\"}\n            onChange={onValueChange}\n            defaultValue={value}\n          >\n            採尿量\n          </InputItem>\n          <List.Item>\n            <Button onClick={onSubmit} type=\"primary\">\n              登録\n            </Button>\n          </List.Item>\n        </List>\n      </Modal>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"./components/Provider\";\nimport { ItemList } from \"./components/ItemList\";\nimport { InputButton } from \"./components/InputButton\";\nconst App = () => {\n  return (\n    <Provider>\n      <div className=\"container\">\n        <header>採尿量レコーダー</header>\n        <ItemList />\n      </div>\n      <InputButton />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport \"antd-mobile/dist/antd-mobile.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"material-design-icons/iconfont/material-icons.css\";\nimport \"@material/fab/dist/mdc.fab.css\";\nimport \"@rmwc/data-table/data-table.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}